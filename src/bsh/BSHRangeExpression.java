/* Generated By:JJTree: Do not edit this line. BSHRangeExpression.java */
package bsh;

import bsh.operators.ExtendedMethod;
import bsh.operators.OperatorProvider;
import bsh.operators.OperatorType;

/**
 * A range expression looks like:<p>
 * min..max<p>
 * or,<p>
 * min..inc..max<p>
 * 
 * The min, max, inc values must be numeric or character values.
 * 
 * @author M203325
 */
public class BSHRangeExpression extends SimpleNode {

    private ExtendedMethod opMethod = null;

    public BSHRangeExpression(int id) {
        super(id);
    }

    public Object eval(CallStack callstack, Interpreter interpreter)
            throws EvalError {

        int length = jjtGetNumChildren();
        Object start = ((SimpleNode) jjtGetChild(0)).eval(callstack, interpreter);
        if (length == 1) {
            return start;
        }

        Object end = ((SimpleNode) jjtGetChild(1)).eval(callstack, interpreter);
        Object inc = null;
        if (length == 3) {
            inc = end;
            end = ((SimpleNode) jjtGetChild(2)).eval(callstack, interpreter);
        }

        start = Primitive.unwrap(start);
        end = Primitive.unwrap(end);
        Object[] args = null;
        Class[] types = null;
        if (inc != null) {
            inc = Primitive.unwrap(inc);
            args = new Object[]{start, end, inc};
            types = new Class[]{start.getClass(), end.getClass(), inc.getClass()};
        }
        else {
            args = new Object[]{start, end};
            types = new Class[]{start.getClass(), end.getClass()};
        }

        opMethod = OperatorProvider.findMethod(interpreter.getNameSpace(), OperatorType.RANGE.getMethodName(), opMethod, OperatorType.RANGE.getAllowLeftCast(), types);
        
        if (opMethod != null) {
            Object result = opMethod.eval(args);
            if (Primitive.isWrapperType(result.getClass())) {
                return new Primitive(result);
            }
            else {
                return result;
            }
        }
        else {
            throw new EvalError("Range function not found for given data types",this,callstack);
        }
    }
    
}
